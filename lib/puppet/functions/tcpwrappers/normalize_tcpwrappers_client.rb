# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
require 'ipaddr'

#
# ---- original file header ----
#
# @summary
#   Converts the argument into a TCP Wrappers-friendly client specification
#
Puppet::Functions.create_function(:'tcpwrappers::normalize_tcpwrappers_client') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    unless args.length == 1
      raise Puppet::ParseError, 'normalize_tcpwrappers_client: excepting 1 argument'
    end
    client = args[0]
    unless client.is_a? String
      raise Puppet::ParseError, 'normalize_tcpwrappers_client: argument must be a String'
    end

    case client
    when %r{^(\d+\.)(\d+\.\d+\.\d+/(8|255\.0\.0\.0))?$}
      Regexp.last_match(1)
    when %r{^(\d+\.\d+\.)(\d+\.\d+/(16|255\.255\.0\.0))?$}
      Regexp.last_match(1)
    when %r{^(\d+\.\d+\.\d+\.)(\d+/(24|255\.255\.255\.0))?$}
      Regexp.last_match(1)
    when %r{^(\d+\.\d+\.\d+\.\d+)(/(32|255\.255\.255\.255))?$}
      Regexp.last_match(1)
    when %r{^(\d+\.\d+\.\d+\.\d+)/(\d+)$}
      ip      = Regexp.last_match(1)
      masklen = Regexp.last_match(2)
      ip      = IPAddr.new(ip).mask(masklen).to_s
      netmask = IPAddr.new('255.255.255.255').mask(masklen).to_s
      "#{ip}/#{netmask}"
    when /^\.?[a-z\d_.]+$/, %r{^/[^ \n\t,:#]+$}, 'ALL', 'LOCAL', 'PARANOID'
      # Hostname, FQDN, suffix, filename, keyword, etc.
      client
    else
      raise Puppet::ParseError, "normalize_tcpwrappers_client: invalid spec: #{client}"
    end
  
  end
end
